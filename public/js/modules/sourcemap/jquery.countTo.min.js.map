{"version":3,"sources":["jquery.countTo.js"],"names":["factory","define","amd","exports","require","jQuery","$","CountTo","element","options","this","$element","extend","DEFAULTS","dataOptions","init","from","to","speed","refreshInterval","decimals","formatter","value","toFixed","onUpdate","onComplete","prototype","loops","Math","ceil","loopCount","increment","data","keys","Object","i","key","update","render","call","clearInterval","interval","formattedValue","text","restart","stop","start","setInterval","bind","toggle","fn","countTo","option","each","$this","method"],"mappings":"CAAA,SAAAA,GACA,mBAAAC,QAAAA,OAAAC,IAEAD,OAAA,CAAA,UAAAD,GACA,iBAAAG,QAEAH,EAAAI,QAAA,WAGAJ,EAAAK,QATA,CAWA,SAAAC,GACA,IAAAC,EAAA,SAAAC,EAAAC,GACAC,KAAAC,SAAAL,EAAAE,GACAE,KAAAD,QAAAH,EAAAM,OAAA,GAAAL,EAAAM,SAAAH,KAAAI,cAAAL,GACAC,KAAAK,QAGAR,EAAAM,SAAA,CACAG,KAAA,EACAC,GAAA,EACAC,MAAA,IACAC,gBAAA,IACAC,SAAA,EACAC,UAqFA,SAAAC,EAAAb,GACA,OAAAa,EAAAC,QAAAd,EAAAW,WArFAI,SAAA,KACAC,WAAA,MAGAlB,EAAAmB,UAAAX,KAAA,WACAL,KAAAY,MAAAZ,KAAAD,QAAAO,KACAN,KAAAiB,MAAAC,KAAAC,KAAAnB,KAAAD,QAAAS,MAAAR,KAAAD,QAAAU,iBACAT,KAAAoB,UAAA,EACApB,KAAAqB,WAAArB,KAAAD,QAAAQ,GAAAP,KAAAD,QAAAO,MAAAN,KAAAiB,OAGApB,EAAAmB,UAAAZ,YAAA,WACA,IAAAL,EAAA,CACAO,KAAAN,KAAAC,SAAAqB,KAAA,QACAf,GAAAP,KAAAC,SAAAqB,KAAA,MACAd,MAAAR,KAAAC,SAAAqB,KAAA,SACAb,gBAAAT,KAAAC,SAAAqB,KAAA,oBACAZ,SAAAV,KAAAC,SAAAqB,KAAA,aAGAC,EAAAC,OAAAD,KAAAxB,GAEA,IAAA,IAAA0B,KAAAF,EAAA,CACA,IAAAG,EAAAH,EAAAE,QAEA,IAAA1B,EAAA2B,WACA3B,EAAA2B,GAIA,OAAA3B,GAGAF,EAAAmB,UAAAW,OAAA,WACA3B,KAAAY,OAAAZ,KAAAqB,UACArB,KAAAoB,YAEApB,KAAA4B,SAEA,mBAAA5B,KAAAD,QAAA,UACAC,KAAAD,QAAAe,SAAAe,KAAA7B,KAAAC,SAAAD,KAAAY,OAGAZ,KAAAoB,WAAApB,KAAAiB,QACAa,cAAA9B,KAAA+B,UACA/B,KAAAY,MAAAZ,KAAAD,QAAAQ,GAEA,mBAAAP,KAAAD,QAAA,YACAC,KAAAD,QAAAgB,WAAAc,KAAA7B,KAAAC,SAAAD,KAAAY,SAKAf,EAAAmB,UAAAY,OAAA,WACA,IAAAI,EAAAhC,KAAAD,QAAAY,UAAAkB,KAAA7B,KAAAC,SAAAD,KAAAY,MAAAZ,KAAAD,SACAC,KAAAC,SAAAgC,KAAAD,IAGAnC,EAAAmB,UAAAkB,QAAA,WACAlC,KAAAmC,OACAnC,KAAAK,OACAL,KAAAoC,SAGAvC,EAAAmB,UAAAoB,MAAA,WACApC,KAAAmC,OACAnC,KAAA4B,SACA5B,KAAA+B,SAAAM,YAAArC,KAAA2B,OAAAW,KAAAtC,MAAAA,KAAAD,QAAAU,kBAGAZ,EAAAmB,UAAAmB,KAAA,WACAnC,KAAA+B,UACAD,cAAA9B,KAAA+B,WAIAlC,EAAAmB,UAAAuB,OAAA,WACAvC,KAAA+B,SACA/B,KAAAmC,OAEAnC,KAAAoC,SAQAxC,EAAA4C,GAAAC,QAAA,SAAAC,GACA,OAAA1C,KAAA2C,KAAA,WACA,IAAAC,EAAAhD,EAAAI,MACAsB,EAAAsB,EAAAtB,KAAA,WAEAvB,EAAA,iBAAA,EAAA2C,EAAA,GACAG,EAAA,iBAAA,EAAAH,EAAA,QAFApB,GAAA,iBAAA,IAKAA,GAAAA,EAAAa,OACAS,EAAAtB,KAAA,UAAAA,EAAA,IAAAzB,EAAAG,KAAAD,KAGAuB,EAAAuB,GAAAhB,KAAAP","file":"../../jquery.countTo.min.js","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // CommonJS\n        factory(require('jquery'));\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n  var CountTo = function (element, options) {\n    this.$element = $(element);\n    this.options  = $.extend({}, CountTo.DEFAULTS, this.dataOptions(), options);\n    this.init();\n  };\n\n  CountTo.DEFAULTS = {\n    from: 0,               // the number the element should start at\n    to: 0,                 // the number the element should end at\n    speed: 1000,           // how long it should take to count between the target numbers\n    refreshInterval: 100,  // how often the element should be updated\n    decimals: 0,           // the number of decimal places to show\n    formatter: formatter,  // handler for formatting the value before rendering\n    onUpdate: null,        // callback method for every time the element is updated\n    onComplete: null       // callback method for when the element finishes updating\n  };\n\n  CountTo.prototype.init = function () {\n    this.value     = this.options.from;\n    this.loops     = Math.ceil(this.options.speed / this.options.refreshInterval);\n    this.loopCount = 0;\n    this.increment = (this.options.to - this.options.from) / this.loops;\n  };\n\n  CountTo.prototype.dataOptions = function () {\n    var options = {\n      from:            this.$element.data('from'),\n      to:              this.$element.data('to'),\n      speed:           this.$element.data('speed'),\n      refreshInterval: this.$element.data('refresh-interval'),\n      decimals:        this.$element.data('decimals')\n    };\n\n    var keys = Object.keys(options);\n\n    for (var i in keys) {\n      var key = keys[i];\n\n      if (typeof(options[key]) === 'undefined') {\n        delete options[key];\n      }\n    }\n\n    return options;\n  };\n\n  CountTo.prototype.update = function () {\n    this.value += this.increment;\n    this.loopCount++;\n\n    this.render();\n\n    if (typeof(this.options.onUpdate) == 'function') {\n      this.options.onUpdate.call(this.$element, this.value);\n    }\n\n    if (this.loopCount >= this.loops) {\n      clearInterval(this.interval);\n      this.value = this.options.to;\n\n      if (typeof(this.options.onComplete) == 'function') {\n        this.options.onComplete.call(this.$element, this.value);\n      }\n    }\n  };\n\n  CountTo.prototype.render = function () {\n    var formattedValue = this.options.formatter.call(this.$element, this.value, this.options);\n    this.$element.text(formattedValue);\n  };\n\n  CountTo.prototype.restart = function () {\n    this.stop();\n    this.init();\n    this.start();\n  };\n\n  CountTo.prototype.start = function () {\n    this.stop();\n    this.render();\n    this.interval = setInterval(this.update.bind(this), this.options.refreshInterval);\n  };\n\n  CountTo.prototype.stop = function () {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  };\n\n  CountTo.prototype.toggle = function () {\n    if (this.interval) {\n      this.stop();\n    } else {\n      this.start();\n    }\n  };\n\n  function formatter(value, options) {\n    return value.toFixed(options.decimals);\n  }\n\n  $.fn.countTo = function (option) {\n    return this.each(function () {\n      var $this   = $(this);\n      var data    = $this.data('countTo');\n      var init    = !data || typeof(option) === 'object';\n      var options = typeof(option) === 'object' ? option : {};\n      var method  = typeof(option) === 'string' ? option : 'start';\n\n      if (init) {\n        if (data) data.stop();\n        $this.data('countTo', data = new CountTo(this, options));\n      }\n\n      data[method].call(data);\n    });\n  };\n}));\n"]}